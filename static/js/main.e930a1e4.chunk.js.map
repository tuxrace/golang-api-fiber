{"version":3,"sources":["config/index.ts","components/Search/Search.tsx","components/Search/Search.styles.ts","components/AppliancesList/AppliancesList.tsx","components/AppliancesList/Appliances.styles.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["API_URL","useStyles","makeStyles","theme","search","marginBottom","spacing","clear","cursor","transition","opacity","Search","handleSearch","classes","React","useState","category","setCategory","setSearch","Grid","container","item","xs","md","Input","type","color","placeholder","fullWidth","className","value","onChange","e","searchText","target","endAdornment","InputAdornment","position","onClick","justify","FormControl","RadioGroup","name","event","row","FormControlLabel","control","Radio","label","Button","variant","disabled","card","breakpoints","down","minHeight","boxShadow","AppliancesList","appliances","setAppliances","useEffect","a","axios","get","res","data","getAppliances","direction","alignItems","lg","length","map","appliance","Box","py","Card","CardHeader","title","brand","model","CardContent","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e930a1e4.chunk.js","sourcesContent":["export const API_URL = 'http://localhost:3001/api';","import React from \"react\";\nimport {\n  Input,\n  Grid,\n  makeStyles,\n  Button,\n  FormControl,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  InputAdornment,\n  IconButton,\n} from \"@material-ui/core\";\nimport styles from \"./Search.styles\";\nimport axios from \"axios\";\nimport { API_URL } from \"../../config\";\n\nconst useStyles = makeStyles(styles);\n\ninterface Props {\n    handleSearch: (c: string, s: string) => void;\n}\n\nconst Search: React.FC<Props> = ({handleSearch}) => {\n  const classes = useStyles();\n  const [category, setCategory] = React.useState('brand');\n  const [search, setSearch] = React.useState('');\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCategory((event.target as HTMLInputElement).value);\n  };\n\n  const submitSearch = () => {\n      handleSearch(category, search);\n  }\n\n  const onSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const searchText = e.target.value;\n    setSearch(searchText);\n  }\n\n  const clearSearch = () => {\n    setSearch('');\n    handleSearch('', '');\n  }\n\n  return (\n    <Grid container>\n      <Grid item xs={12} md={5}>\n        <Input\n          type=\"text\"\n          color=\"secondary\"\n          placeholder=\"Search Appliance\"\n          fullWidth\n          className={classes.search}\n          value={search}\n          onChange={onSearchChange}\n          endAdornment={\n            <InputAdornment position=\"end\">\n                <div className={classes.clear} onClick={clearSearch}>{`â“§`}</div>\n            </InputAdornment>\n          }\n        />\n      </Grid>\n      <Grid item xs={12} md={5} container justify=\"center\">\n        <FormControl>\n          <RadioGroup name=\"search\" value={category} onChange={handleChange} row>\n            <FormControlLabel value=\"brand\" control={<Radio />} label=\"Brand\" />\n            <FormControlLabel value=\"model_name\" control={<Radio />} label=\"Model\" />\n            <FormControlLabel\n              value=\"serial_number\"\n              control={<Radio />}\n              label=\"Serial Number\"\n            />\n          </RadioGroup>\n        </FormControl>\n      </Grid>\n      <Grid item container xs={12} md={2}>\n        <Button color=\"primary\" variant=\"contained\" fullWidth  onClick={submitSearch} disabled={!search}>\n          Search\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Search;\n","import { Theme } from \"@material-ui/core\";\n\nexport default (theme: Theme) => ({\n    search: {\n        marginBottom: theme.spacing(1)    \n    },\n    clear: {\n        cursor: 'pointer',\n        transition: '0.5s',\n        opacity: '0.6',\n        '&:hover': {\n            opacity: '1'\n        }\n    }\n})","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { API_URL } from \"../../config\";\nimport {\n  Card,\n  CardHeader,\n  makeStyles,\n  Grid,\n  CardContent,\n  Box,\n} from \"@material-ui/core\";\nimport EditIcon from '@material-ui/icons/Edit'\nimport Search from \"../Search\";\nimport styles from \"./Appliances.styles\";\n\nconst useStyles = makeStyles(styles);\n\nconst AppliancesList = () => {\n  const [appliances, setAppliances] = useState([]);\n  const classes = useStyles();\n\n  useEffect(() => {\n    async function getAppliances() {\n      const res = await axios.get(`${API_URL}/appliances`);\n      setAppliances(res.data);\n    }\n    getAppliances();\n  }, []);\n\n  const handleSearch = async (category: string, search: string) => {\n    if(!category && !search){\n        const res = await axios.get(`${API_URL}/appliances`);\n        setAppliances(res.data);\n        return;\n    }\n    const res = await axios.get(`${API_URL}/appliances-search?category=${category}&search=${search}`);\n    setAppliances(res.data);\n  }\n\n  return (\n    <Grid container direction=\"row\" alignItems=\"center\">\n      <Grid item>\n        <h1>Appliances</h1>\n      </Grid>\n      <Grid item xs={12} lg={12}>\n        <Search handleSearch={handleSearch} />\n      </Grid>\n      <Grid item container direction=\"column\">\n        {appliances.length > 0 ? appliances.map((appliance: any) => (\n          <Box py={1}>\n            <Card className={classes.card}>\n              <CardHeader title={`${appliance.brand} ${appliance.model}`} />\n              <CardContent>\n                  <EditIcon />{appliance.model}\n                </CardContent>\n            </Card>\n          </Box>\n        )): <div>No Records Found</div>}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default AppliancesList;\n","import { Theme } from \"@material-ui/core\";\n\nexport default (theme: Theme) => ({\n   card: {\n       [theme.breakpoints.down('xs')]: {\n           minHeight: 220,\n           boxShadow: '0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14), 0px 3px 14px 2px rgba(0,0,0,0.12)',\n       }\n   }\n})","import React from 'react';\nimport './App.css';\nimport AppliancesList from './components/AppliancesList';\nimport { Container } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <Container maxWidth=\"md\">\n      <AppliancesList />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}